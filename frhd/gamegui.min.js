'use strict';
require = function e(t, n, r) {
  function s(o, s) {
    if (!n[o]) {
      if (!t[o]) {
        var i = "function" == typeof require && require;
        if (!s && i) {
          return i(o, true);
        }
        if (a) {
          return a(o, true);
        }
        var f = new Error("Cannot find module '" + o + "'");
        throw f.code = "MODULE_NOT_FOUND", f;
      }
      var u = n[o] = {
        exports : {}
      };
      t[o][0].call(u.exports, function(e) {
        var n = t[o][1][e];
        return s(n ? n : e);
      }, u, u.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var a = "function" == typeof require && require;
  var o = 0;
  for (; o < r.length; o++) {
    s(r[o]);
  }
  return s;
}({
  155 : [function(require, Module) {
    var result = GameSettings;
    var React = require("react");
    React.initializeTouchEvents(true);
    var child = require("./components/loading/loading");
    var IndexRoute = require("./components/dialogs/dialogs");
    var template = require("./components/focusoverlay/focusoverlay");
    var TabTemplate = require("./components/popups/controls");
    var c = require("./components/popups/mobilerotate");
    var RedBox = require("./components/popups/retryoptions");
    var html = React.createClass({
      displayName : "GameGui",
      getInitialState : function() {
        return {
          preloading : true,
          loadingPercent : 0,
          loadingText : "Loading game, please wait...",
          inFocus : true,
          showControls : false
        };
      },
      render : function() {
        var th_field = "";
        return th_field = this.state.preloading ? React.createElement(child, {
          percent : this.state.loadingPercent,
          text : this.state.loadingText
        }) : React.createElement("div", {
          className : "gameGui"
        }, React.createElement(IndexRoute, {
          data : this.state
        }), this.showFocusOverlay(), this.showPopup(), this.showSkipTrack());
      },
      showFocusOverlay : function() {
        var individualMD5 = false;
        return this.state.inFocus === false && (individualMD5 = React.createElement(template, null)), individualMD5;
      },
      showPopup : function() {
        var inspectorControlsElement = false;
        var state = this.state;
        return result.mobile && state.playerAlive && !state.paused && !state.playing ? inspectorControlsElement = this.showMobileRotate() : result.mobile && state.paused ? (popup_rotate = this.showMobileRotate(), popup_retry = this.showRetryOptions(), inspectorControlsElement = React.createElement("div", {
          id : "paused_popup"
        }, popup_rotate, popup_retry)) : inspectorControlsElement = !result.mobile || state.playerAlive && state.playing ? this.showControls() : this.showRetryOptions(), inspectorControlsElement;
      },
      skipTrack : function() {
        if ("undefined" != typeof Application) {
          var vmId = GameSettings.track.id;
          var noDeliveryToSender = GameSettings.campaignData.skip_cost;
          Application.events.publish("game.skipTrack", vmId, noDeliveryToSender);
        }
      },
      showSkipTrack : function() {
        var inspectorControlsElement = false;
        return this.state.showSkip && (inspectorControlsElement = React.createElement("div", {
          className : "skipTrack"
        }, React.createElement("span", {
          className : "primary-button primary-button-green",
          onClick : this.skipTrack
        }, "Skip Track ", React.createElement("span", {
          className : "icon core_icons core_icons-coin_icon_sm"
        })))), inspectorControlsElement;
      },
      showControls : function() {
        var object_searchCourseContent = false;
        if (this.state.showControls) {
          var controls = this.state.showControls;
          object_searchCourseContent = React.createElement(TabTemplate, {
            controls : controls
          });
        }
        return object_searchCourseContent;
      },
      showMobileRotate : function() {
        var dmgVals = false;
        return (this.state.showControls || this.state.paused) && (dmgVals = React.createElement(c, null)), dmgVals;
      },
      showRetryOptions : function() {
        return React.createElement(RedBox, {
          playerAlive : this.state.playerAlive,
          paused : this.state.paused
        });
      },
      componentDidMount : function() {
        this.bindToGame();
      },
      componentWillUnmount : function() {
        GameManager.removeListener("stateChange", this.handleGameStateChange);
      },
      handleGameStateChange : function(persons) {
        this.setState(persons);
      },
      componentWillUpdate : function() {
      },
      bindToGame : function() {
        GameManager.on("stateChange", this.handleGameStateChange);
      }
    });
    window.React = React;
    window.GameGui = React.createElement(html, null);
    Module.exports = html;
  }, {
    "./components/dialogs/dialogs" : 167,
    "./components/focusoverlay/focusoverlay" : 180,
    "./components/loading/loading" : 181,
    "./components/popups/controls" : 182,
    "./components/popups/mobilerotate" : 183,
    "./components/popups/retryoptions" : 184,
    react : "react"
  }],
  156 : [function(require, module) {
    var React = require("react");
    var Window = require("./footer");
    var Tab = require("./splash");
    var Map = require("../components/rightinfo");
    var Note = require("../components/leftinfo");
    var IndexRoute = require("./title");
    var template = require("./progress");
    var Route = require("../components/homebutton");
    var Table = require("../components/fullscreenbutton");
    var that = Application.Helpers.GoogleAnalyticsHelper;
    var storeMixin = React.createClass({
      displayName : "CompleteDialog",
      keysBound : false,
      getInitialState : function() {
        return {
          loading : true,
          rewards : false,
          personalBest : false,
          bestTime : false,
          medal : false
        };
      },
      bindKeys : function() {
        if (this.keysBound === false) {
          this.keysBound = true;
          $(document.body).on("keydown", this.handleKeyDown);
        }
      },
      unbindKeys : function() {
        if (this.keysBound) {
          this.keysBound = false;
          $(document.body).off("keydown", this.handleKeyDown);
        }
      },
      bindToGameStateChange : function() {
        GameManager.on("stateChange", this.onGameStateChange);
      },
      unbindToGameStateChange : function() {
        GameManager.removeListener("stateChange", this.onGameStateChange);
      },
      onGameStateChange : function(self) {
        if (self.inFocus && self.showDialog) {
          this.bindKeys();
        } else {
          this.unbindKeys();
        }
      },
      componentDidMount : function() {
        this.bindToGameStateChange();
        this.bindKeys();
      },
      componentWillUnmount : function() {
        this.unbindToGameStateChange();
        this.unbindKeys();
      },
      handleKeyDown : function(event) {
        if (this.state.loading === false) {
          switch(event.keyCode) {
            case 13:
            case 82:
              if (GameSettings.bestGhostEnabled && this.state.personalBest) {
                GameManager.loadRace(GameSettings.track.id, GameSettings.user.u_id);
              }
              GameManager.command("restart");
              break;
            case 78:
              this.gotoNextCampaignTrack();
              break;
            case 70:
              this.toggleFullscreen();
              break;
            case 27:
              this.exitFullscreen();
          }
        }
      },
      exitFullscreen : function() {
        if ("undefined" != typeof GameManager) {
          GameManager.command("exit_fullscreen");
        }
      },
      toggleFullscreen : function() {
        if ("undefined" != typeof GameManager) {
          GameManager.command("fullscreen");
        }
      },
      trackEvent : function(name, x, type) {
        var types = {
          category : "campaign-track",
          action : name,
          label : x,
          value : type,
          non_interaction : true
        };
        that.track_event(types);
      },
      gotoNextCampaignTrack : function() {
        if ("undefined" != typeof Application) {
          var Game = this.getCampaignData();
          var id = Game.next_track;
          Application.router.do_route("/t/" + id + "/c", {
            trigger : true,
            replace : false
          });
        }
      },
      closeDialog : function() {
        if ("undefined" != typeof GameManager) {
          GameManager.command("dialog", false);
        }
      },
      getCampaignData : function() {
        var sup = false;
        return "undefined" != typeof GameSettings && (sup = GameSettings.campaignData), sup;
      },
      componentWillMount : function() {
        var postData = this.props.completeData.postData;
        this.postComplete(postData);
      },
      postComplete : function(data) {
        var svcUrl = "/track_api/track_run_complete";
        var payload = {
          track : false
        };
        var request = Application.Helpers.AjaxHelper.post(svcUrl, data, payload);
        request.done(this.postCompleteSuccess);
        request.fail(this.postCompleteFail);
      },
      postCompleteSuccess : function(testData) {
        if (1 == testData.result) {
          var config = testData.data;
          var json = GameSettings.campaignData;
          json.campaign_progress_bar = config.campaign_progress_bar;
          var g = false;
          if (config.new_cns > 0 || config.new_pts > 0) {
            g = {};
            if (config.new_cns) {
              g.coins = config.new_cns;
            }
            if (config.new_pts) {
              g.points = config.new_pts;
            }
          }
          var r = false;
          if (config.personal_best) {
            r = true;
          }
          var foundGID = false;
          var row_primary_key = false;
          if (config.campaign) {
            var s = config.campaign;
            row_primary_key = s.best_time;
            foundGID = s.medal;
            json.next_track = s.next_tid;
            json.can_skip = false;
          }
          this.setState({
            loading : false,
            rewards : g,
            bestTime : row_primary_key,
            personalBest : r,
            medal : foundGID
          });
          this.trackEvent("track-complete-" + foundGID, GameSettings.track.id, this.props.completeData.analytics.deaths);
          GameManager.emit("gameComplete", "campaign");
        }
      },
      postCompleteFail : function(contextReference) {
        console.log("Fail", contextReference);
      },
      render : function() {
        var props = this.props;
        var isLoading = this.state.loading;
        var context = props.completeData;
        var state = this.state;
        var rewards = false;
        var oldParenthesisCount = false;
        var oldDDIndent = false;
        var e3 = "third";
        var wrapper = "-:--.-";
        var interval = "-:--.-";
        var shareTimeInDays = context.postData.time;
        var i = (this.state.serverResponse, {});
        var s = "";
        var trackNum = 0;
        var _ = 0;
        var nextTrackId = false;
        var data = this.getCampaignData();
        return data && (i = data.campaign_progress_bar, s = data.campaign.title, trackNum = data.track.track_num, _ = data.track.track_num_max, wrapper = data.goals.first, interval = data.goals.second, nextTrackId = data.next_track), state.loading === false && (rewards = state.rewards, oldParenthesisCount = state.bestTime, e3 = state.medal, oldDDIndent = state.personalBest, data.user.best_time = oldParenthesisCount, data.user.has_goal = e3), React.createElement("div", {
          className : "dialog-container"
        }, React.createElement("div", {
          className : "complete-dialog"
        }, React.createElement(IndexRoute, {
          trackNum : trackNum,
          totalTracks : _,
          title : s,
          onClick : this.navigateToCampagin
        }), React.createElement(Note, {
          time : shareTimeInDays,
          bestTime : oldParenthesisCount,
          personalBest : oldDDIndent
        }), React.createElement(Tab, {
          loading : isLoading,
          medal : e3,
          silverTime : interval,
          goldTime : wrapper
        }), React.createElement(Map, {
          loading : isLoading,
          rewards : rewards,
          bestTime : oldParenthesisCount
        }), React.createElement(Window, {
          loading : isLoading,
          nextTrackId : nextTrackId,
          personalBest : oldDDIndent
        })), this.renderProgress(i), React.createElement(Route, null), React.createElement(Table, null));
      },
      navigateToCampagin : function() {
        if ("undefined" != typeof Application) {
          var data = this.getCampaignData();
          var slug = data.campaign.slug;
          Application.router.do_route("/campaign/" + slug, {
            trigger : true,
            replace : false
          });
          this.trackEvent("campaign-track-complete-goto-campaigns-title", "goto-campaigns", 0);
        }
      },
      renderProgress : function(progress) {
        var displayRatio = false;
        var height = window.innerHeight;
        return height > 400 && (displayRatio = React.createElement(template, {
          progress : progress
        })), displayRatio;
      }
    });
    module.exports = storeMixin;
  }, {
    "../components/fullscreenbutton" : 162,
    "../components/homebutton" : 163,
    "../components/leftinfo" : 164,
    "../components/rightinfo" : 165,
    "./footer" : 157,
    "./progress" : 158,
    "./splash" : 159,
    "./title" : 160,
    react : "react"
  }],
  157 : [function(require, module) {
    var React = require("react");
    var Route = require("../components/footerbutton");
    var that = Application.Helpers.GoogleAnalyticsHelper;
    var storeMixin = React.createClass({
      displayName : "Footer",
      gotoNextCampaignTrack : function() {
        if (!this.props.loading && "undefined" != typeof Application) {
          var scale = this.props.nextTrackId;
          Application.router.do_route("/t/" + scale + "/c", {
            trigger : true,
            replace : false
          });
          this.trackEvent("campaign-go-next-track", GameSettings.track.id, 0);
        }
      },
      challengeFriends : function() {
        if ("undefined" != typeof GameManager && "undefined" != typeof Application) {
          Application.events.publish("game.showChallenge");
          this.trackEvent("campaign-track-complete-show-challenge", "show-challenge", 0);
        }
      },
      retryTrack : function() {
        if (!this.props.loading) {
          if ("undefined" != typeof GameManager) {
            if (GameSettings.bestGhostEnabled && this.props.personalBest) {
              GameManager.loadRace(GameSettings.track.id, GameSettings.user.u_id);
            }
            GameManager.command("restart");
            this.trackEvent("campaign-track-complete-retry", "track-retry", 0);
          }
        }
      },
      gotoCampaigns : function() {
        if ("undefined" != typeof Application) {
          Application.router.do_route("/campaign", {
            trigger : true,
            replace : false
          });
          this.trackEvent("campaign-track-complete-goto-campaigns", "goto-campaigns", 0);
        }
      },
      trackEvent : function(name, x, type) {
        var types = {
          category : "campaign-track",
          action : name,
          label : x,
          value : type,
          non_interaction : true
        };
        that.track_event(types);
      },
      render : function() {
        var loading = this.props.loading;
        return React.createElement("div", {
          className : "dialog-footer"
        }, React.createElement("div", {
          className : "buttonContainer"
        }, React.createElement(Route, {
          title : "Campaigns",
          icon : "dialog_button_icons dialog_button_icons-campaigns_icon",
          onClick : this.gotoCampaigns
        }), React.createElement(Route, {
          title : "Challenge",
          icon : "dialog_button_icons dialog_button_icons-challenge_icon",
          color : "green",
          onClick : this.challengeFriends
        }), React.createElement(Route, {
          title : "Retry",
          hotkey : "R",
          icon : "dialog_button_icons dialog_button_icons-retry_icon",
          onClick : this.retryTrack,
          disabled : loading
        }), this.renderNextTrackButton()));
      },
      renderNextTrackButton : function() {
        var props = this.props;
        var disabled = props.loading;
        var tableWidth = props.nextTrackId;
        var match = false;
        return tableWidth !== false && (match = React.createElement(Route, {
          title : "Next",
          hotkey : "N",
          icon : "dialog_button_icons dialog_button_icons-next_icon",
          onClick : this.gotoNextCampaignTrack,
          disabled : disabled
        })), match;
      }
    });
    module.exports = storeMixin;
  }, {
    "../components/footerbutton" : 161,
    react : "react"
  }],
  158 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "CampaignProgress",
      navigateToTrack : function(event) {
        var image = event.currentTarget;
        if ("undefined" != typeof Application) {
          var id = image.getAttribute("data-id");
          Application.router.do_route("/t/" + id + "/c", {
            trigger : true,
            replace : false
          });
        }
      },
      navigateToCampaign : function(event) {
        var image = event.currentTarget;
        if ("undefined" != typeof Application) {
          var _td_h = image.getAttribute("data-id");
          Application.router.do_route("/campaign/" + _td_h, {
            trigger : true,
            replace : false
          });
        }
      },
      render : function() {
        var library = this.props.progress;
        var year = this.renderCampaign(library.current_campaign);
        var header = "";
        if (library.next_campaign) {
          header = this.renderCampaign(library.next_campaign);
        }
        var tracks = library.tracks;
        return React.createElement("div", {
          className : "campaignProgress"
        }, React.createElement("div", {
          className : "container"
        }, year, tracks.map(this.renderTrackMedal), header));
      },
      renderTrackMedal : function(item) {
        var spos = false;
        var id = item.track.id;
        var name = false;
        if (item.current && (name = React.createElement("span", {
          className : "marker campaign_icons campaign_icons-track_marker"
        })), item.status.completed) {
          var type = item.status.medal;
          var color_class = "";
          switch(type) {
            case "gold":
              color_class = "gold_medal_md";
              break;
            case "silver":
              color_class = "silver_medal_md";
              break;
            case "bronze":
              color_class = "bronze_medal_md";
          }
          spos = React.createElement("span", {
            key : id,
            className : "campaign_icons campaign_icons-" + color_class,
            "data-id" : id,
            onClick : this.navigateToTrack
          }, name);
        } else {
          spos = item.status.locked ? React.createElement("span", {
            key : id,
            className : "campaign_icons campaign_icons-locked_medal_md"
          }) : React.createElement("span", {
            key : id,
            className : "campaign_icons campaign_icons-blue_medal_md",
            "data-id" : id,
            onClick : this.navigateToTrack
          }, name);
        }
        return spos;
      },
      renderCampaign : function(row) {
        var tag = "";
        if (row.locked) {
          tag = React.createElement("span", {
            className : "campaign_icons campaign_icons-campaign_number_locked_sm"
          });
        } else {
          var line = row.num;
          tag = React.createElement("span", {
            className : "campaign_icons campaign_icons-campaign_icon_sm campaign",
            "data-id" : row.id,
            onClick : this.navigateToCampaign
          }, line);
        }
        return tag;
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  159 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "Splash",
      render : function() {
        var th_field = "";
        return th_field = this.props.loading ? this.getLoading() : this.getMedalsSplash();
      },
      getMedalsSplash : function() {
        var props = this.props;
        var s = props.medal;
        var color_class = "";
        var name = "faded";
        var class_string = "faded";
        switch(s) {
          case "third":
            color_class = "bronze_medal_banner";
            break;
          case "second":
            color_class = "silver_medal_banner";
            class_string = "";
            break;
          case "first":
            color_class = "gold_medal_banner";
            class_string = "";
            name = "";
        }
        var tag = props.goldTime;
        var filter = props.silverTime;
        return React.createElement("div", {
          className : "splash splash-campaign"
        }, React.createElement("div", {
          className : "medals"
        }, React.createElement("div", {
          className : "medalTime"
        }, React.createElement("div", {
          className : "time"
        }, "Finish"), React.createElement("span", {
          className : "medal campaign_icons campaign_icons-bronze_medal_xlg"
        })), React.createElement("div", {
          className : "medalTime"
        }, React.createElement("div", {
          className : "time"
        }, filter), React.createElement("span", {
          className : "medal campaign_icons campaign_icons-silver_medal_xlg " + class_string
        })), React.createElement("div", {
          className : "medalTime"
        }, React.createElement("div", {
          className : "time"
        }, tag), React.createElement("span", {
          className : "medal campaign_icons campaign_icons-gold_medal_xlg " + name
        }))), React.createElement("span", {
          className : "banner campaign_icons campaign_icons-" + color_class
        }));
      },
      getLoading : function() {
        var testStyle = {
          opacity : 0.7
        };
        return React.createElement("div", {
          className : "splash splash-campaign"
        }, React.createElement("div", {
          className : "medals",
          style : testStyle
        }, React.createElement("div", {
          className : "medalTime"
        }, React.createElement("div", {
          className : "time"
        }, " "), React.createElement("span", {
          className : "medal campaign_icons campaign_icons-bronze_medal_xlg"
        })), React.createElement("div", {
          className : "medalTime"
        }, React.createElement("div", {
          className : "time"
        }, " "), React.createElement("span", {
          className : "medal campaign_icons campaign_icons-silver_medal_xlg"
        })), React.createElement("div", {
          className : "medalTime"
        }, React.createElement("div", {
          className : "time"
        }, " "), React.createElement("span", {
          className : "medal campaign_icons campaign_icons-gold_medal_xlg"
        }))));
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  160 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "Title",
      render : function() {
        var width = this.props.trackNum;
        var children = this.props.totalTracks;
        var categories = this.props.title;
        var onClick = this.props.onClick;
        return React.createElement("div", {
          className : "dialogTitle dialogTitle-campaign"
        }, React.createElement("span", {
          className : "title",
          onClick : onClick
        }, categories), " - Track ", width, "/", children);
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  161 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "FooterButton",
      render : function() {
        var item = this.props;
        var fileName = item.title;
        var icon = item.icon;
        var cls = (item.text, item.color);
        var className = item.disabled ? "disabled" : "";
        var onClick = item.onClick;
        var inner = "";
        if (icon) {
          inner = React.createElement("span", {
            className : icon
          });
        }
        if (!cls) {
          cls = "blue";
        }
        var text = false;
        return item.hotkey && GameSettings.mobile === false && (text = React.createElement("span", {
          className : "hotkey"
        }, React.createElement("span", {
          className : "bracket"
        }, " ["), item.hotkey, React.createElement("span", {
          className : "bracket"
        }, "] "))), React.createElement("div", {
          className : className + " footerButton"
        }, React.createElement("span", {
          className : " primary-button primary-button-" + cls,
          onClick : onClick
        }, inner), React.createElement("br", null), React.createElement("span", {
          className : "title"
        }, fileName), text);
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  162 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "FullscreenButton",
      toggleFullscreen : function() {
        if ("undefined" != typeof GameManager) {
          GameManager.command("fullscreen");
        }
      },
      showFullscreen : function() {
        var e = false;
        return "web" === GameSettings.platform && (e = true), e;
      },
      render : function() {
        var fs = GameSettings.fullscreen;
        var scopeClassName = "fullscreen_btn";
        if (fs) {
          scopeClassName = "exit_fullscreen_btn";
        }
        var circleStyle = {
          display : "none"
        };
        var mobile = GameSettings.mobile;
        return this.showFullscreen() && !mobile && (circleStyle = {}), React.createElement("div", {
          style : circleStyle,
          className : "dialog-fullscreenButton dialog_button_icons dialog_button_icons-" + scopeClassName,
          onClick : this.toggleFullscreen
        });
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  163 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "HomeButton",
      navigateHome : function() {
        if (GameSettings.embedded) {
          var facebookString = GameSettings.basePlatformUrl;
          window.open(facebookString);
        } else {
          if (Application) {
            Application.router.do_route("/", {
              trigger : true,
              replace : false
            });
          }
        }
      },
      render : function() {
        return React.createElement("div", {
          className : "dialog-homeButton dialog_button_icons dialog_button_icons-home_btn",
          onClick : this.navigateHome
        });
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  164 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "LeftInfo",
      render : function() {
        var year = "Time:";
        var label = this.props.time;
        var stateNavigator = this.props.personalBest;
        var backgroundProgressSpinner = false;
        return stateNavigator && (backgroundProgressSpinner = React.createElement("div", {
          className : "newbest"
        }, "NEW BEST!")), React.createElement("div", {
          className : "sideInfo leftInfo"
        }, React.createElement("div", {
          className : "title"
        }, year), React.createElement("div", {
          className : "time"
        }, label), backgroundProgressSpinner);
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  165 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "RightInfo",
      renderCoinReward : function(label) {
        return React.createElement("div", {
          className : "reward"
        }, React.createElement("span", {
          className : "icon store_icons store_icons-icon_coin"
        }), React.createElement("span", {
          className : "amount"
        }, label));
      },
      renderPointsReward : function(label) {
        return React.createElement("div", {
          className : "reward"
        }, React.createElement("span", {
          className : "icon core_icons core_icons-icon_points"
        }), React.createElement("span", {
          className : "amount"
        }, label));
      },
      renderLoading : function() {
        return React.createElement("div", {
          className : "loading"
        }, React.createElement("span", {
          className : "loading-spinner_sm"
        }));
      },
      renderRewards : function(p) {
        var indicators = "";
        var texts = "";
        return p.coins && p.coins > 0 && (indicators = this.renderCoinReward(p.coins)), p.points && p.points > 0 && (texts = this.renderPointsReward(p.points)), React.createElement("div", null, indicators, texts);
      },
      renderTime : function(name) {
        return React.createElement("div", {
          className : "time"
        }, name);
      },
      renderSignup : function() {
        return React.createElement("div", {
          className : "signup"
        }, React.createElement("span", {
          className : "link",
          onClick : this.promptSignup
        }, "Sign Up Now!"));
      },
      promptSignup : function() {
        if (GameSettings.embedded) {
          var facebookString = GameSettings.basePlatformUrl;
          window.open(facebookString);
        } else {
          if ("undefined" != typeof Application) {
            Application.events.publish("prompt.signup");
          }
        }
      },
      render : function() {
        var results = "";
        var buttons = "";
        var data = this.props;
        var element = data.rewards;
        var event = data.bestTime;
        var view = data.loading;
        var username = data.guest;
        return view ? (buttons = "", results = this.renderLoading()) : username ? (buttons = "Rewards:", results = this.renderSignup()) : element ? (buttons = "Rewards:", results = this.renderRewards(element)) : event && (buttons = "Best:", results = this.renderTime(event)), React.createElement("div", {
          className : "sideInfo rightInfo"
        }, React.createElement("div", {
          className : "title"
        }, buttons), results);
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  166 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "Toggle",
      render : function() {
        var e = this.props;
        var id = e.id;
        var change = e.change;
        var checked = e.checked;
        return React.createElement("div", {
          className : "primary-switch"
        }, React.createElement("input", {
          id : id,
          className : "primary-switch-toggle",
          type : "checkbox",
          onChange : change,
          defaultChecked : checked
        }), React.createElement("label", {
          htmlFor : id
        }));
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  167 : [function(require, module) {
    var React = require("react");
    var a = require("./campaign/complete");
    var i = require("./regular/complete");
    var o = require("./race/race");
    var legend = require("./settings/settings");
    var storeMixin = React.createClass({
      displayName : "Dialogs",
      className : "gameDialog",
      getGameSettings : function() {
        var sup = {};
        return "undefined" != typeof GameSettings && (sup = GameSettings), sup;
      },
      render : function() {
        var pageName = this.props.data.showDialog;
        var options = this.props.data.dialogOptions;
        var menuStyle = {};
        var c = "";
        switch(pageName) {
          case "track_complete":
            c = React.createElement(i, {
              completeData : options
            });
            break;
          case "campaign_complete":
            c = React.createElement(a, {
              completeData : options
            });
            break;
          case "race_dialog":
            c = React.createElement(o, {
              raceOptions : options
            });
            break;
          case "settings":
            c = React.createElement(legend, null);
            break;
          default:
            menuStyle = {
              display : "none"
            };
        }
        return React.createElement("div", {
          className : this.className,
          style : menuStyle
        }, c);
      }
    });
    module.exports = storeMixin;
  }, {
    "./campaign/complete" : 156,
    "./race/race" : 170,
    "./regular/complete" : 172,
    "./settings/settings" : 178,
    react : "react"
  }],
  168 : [function(require, module) {
    var React = require("react");
    var Route = require("../components/footerbutton");
    var storeMixin = React.createClass({
      displayName : "RaceFooter",
      cancelRace : function() {
        if ("undefined" != typeof GameManager) {
          GameManager.command("dialog", false);
          GameManager.command("clear race");
        }
      },
      startRace : function() {
        if ("undefined" != typeof GameManager) {
          GameManager.command("dialog", false);
        }
      },
      render : function() {
        return React.createElement("div", {
          className : "dialog-footer"
        }, React.createElement("div", {
          className : "buttonContainer"
        }, React.createElement(Route, {
          title : "Cancel",
          icon : "dialog_button_icons dialog_button_icons-cancel_icon",
          onClick : this.cancelRace
        }), React.createElement(Route, {
          title : "Challenge",
          icon : "dialog_button_icons dialog_button_icons-challenge_icon",
          color : "green"
        }), React.createElement(Route, {
          title : "Start",
          icon : "dialog_button_icons dialog_button_icons-play_icon",
          onClick : this.startRace
        })));
      }
    });
    module.exports = storeMixin;
  }, {
    "../components/footerbutton" : 161,
    react : "react"
  }],
  169 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "RaceList",
      render : function() {
        var bottomData = this.props.races;
        return React.createElement("div", {
          className : "raceList"
        }, React.createElement("ul", null, this.renderTitle(), bottomData.map(this.renderRace)));
      },
      renderTitle : function() {
        return React.createElement("li", {
          className : "title"
        }, React.createElement("span", {
          className : "name"
        }, "Name:"), React.createElement("span", {
          className : "time"
        }, "Time:"));
      },
      renderRace : function(event) {
        var user = event.user;
        var roleId = user.img_url_small;
        var label = user.d_name;
        var items = event.runTime;
        var data = {};
        return data.background = "url(" + roleId + ") no-repeat #CCC", data.backgroundSize = "100%", React.createElement("li", {
          key : user.u_id
        }, React.createElement("span", {
          className : "profileImage",
          style : data
        }, React.createElement("img", {
          src : roleId
        })), React.createElement("span", {
          className : "name"
        }, label), React.createElement("span", {
          className : "time"
        }, items));
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  170 : [function(require, module) {
    var React = require("react");
    var IndexRoute = require("./title");
    var Note = require("./list");
    var Window = require("./footer");
    var Input = require("../components/homebutton");
    var Tab = require("../components/fullscreenbutton");
    var storeMixin = React.createClass({
      displayName : "RaceDialog",
      getInitialState : function() {
        return {};
      },
      getDefaultProps : function() {
        return {
          title : "Race Setup"
        };
      },
      render : function() {
        var _props3 = this.props;
        var torrent_title = (this.state, _props3.title);
        var context = this.props.raceOptions;
        var p = [];
        return context && (p = context.races), React.createElement("div", {
          className : "dialog-container"
        }, React.createElement("div", {
          className : "race-dialog"
        }, React.createElement(IndexRoute, {
          title : torrent_title
        }), React.createElement(Note, {
          races : p
        }), React.createElement(Window, null)), React.createElement(Input, null), React.createElement(Tab, null));
      }
    });
    module.exports = storeMixin;
  }, {
    "../components/fullscreenbutton" : 162,
    "../components/homebutton" : 163,
    "./footer" : 168,
    "./list" : 169,
    "./title" : 171,
    react : "react"
  }],
  171 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "Title",
      render : function() {
        var titleElement = this.props.title;
        return React.createElement("div", {
          className : "dialogTitle dialogTitle-race"
        }, titleElement);
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  172 : [function(require, module) {
    var React = require("react");
    var Window = require("./footer");
    var Tab = require("./splash");
    var Map = require("../components/rightinfo");
    var Note = require("../components/leftinfo");
    var IndexRoute = require("./title");
    var Input = require("../components/homebutton");
    var Route = require("../components/fullscreenbutton");
    var that = Application.Helpers.GoogleAnalyticsHelper;
    var storeMixin = React.createClass({
      displayName : "CompleteDialog",
      keysBound : false,
      getInitialState : function() {
        return {
          loading : true,
          rewards : false,
          personalBest : false,
          bestTime : false,
          guest : false
        };
      },
      componentWillMount : function() {
        var postData = this.props.completeData.postData;
        if (postData.u_id) {
          this.postComplete(postData);
        } else {
          this.setState({
            loading : false,
            guest : true
          });
        }
      },
      postComplete : function(data) {
        var svcUrl = "/track_api/track_run_complete";
        var payload = {
          track : false
        };
        var request = Application.Helpers.AjaxHelper.post(svcUrl, data, payload);
        request.done(this.postCompleteSuccess);
        request.fail(this.postCompleteFail);
      },
      postCompleteSuccess : function(textFile) {
        if (1 == textFile.result) {
          var data = textFile.data;
          var n = this.getGameSettings();
          var a = false;
          var r = false;
          var v = false;
          if (data.personal_best) {
            a = data.user_race.run_time;
            if (!n.userTrackStats) {
              n.userTrackStats = {};
            }
            n.userTrackStats.best_time = a;
            r = true;
          } else {
            if (n.userTrackStats) {
              a = n.userTrackStats.best_time;
            }
          }
          if (data.new_cns > 0 || data.new_pts > 0) {
            v = {
              coins : data.new_cns,
              points : data.new_pts
            };
          }
          this.setState({
            loading : false,
            rewards : v,
            bestTime : a,
            personalBest : r
          });
          GameManager.emit("gameComplete", "regular");
          if (r) {
            this.trackEvent("track-complete-logged-in", "track-complete-new-best", this.props.completeData.analytics.deaths);
          } else {
            this.trackEvent("track-complete-logged-in", "track-complete-not-best", this.props.completeData.analytics.deaths);
          }
        } else {
          this.setState({
            loading : false,
            rewards : false,
            bestTime : "Try Again",
            personalBest : false
          });
          this.trackEvent("track-complete-logged-out", "track-complete-logged-out", this.props.completeData.analytics.deaths);
        }
      },
      postCompleteFail : function(contextReference) {
        console.log("Fail", contextReference);
        this.trackEvent("track-complete-fail", GameSettings.track.id, 0);
      },
      bindKeys : function() {
        if (this.keysBound === false) {
          this.keysBound = true;
          $(document.body).on("keydown", this.handleKeyDown);
        }
      },
      unbindKeys : function() {
        if (this.keysBound) {
          this.keysBound = false;
          $(document.body).off("keydown", this.handleKeyDown);
        }
      },
      bindToGameStateChange : function() {
        GameManager.on("stateChange", this.onGameStateChange);
      },
      unbindToGameStateChange : function() {
        GameManager.removeListener("stateChange", this.onGameStateChange);
      },
      onGameStateChange : function(self) {
        if (self.inFocus && self.showDialog) {
          this.bindKeys();
        } else {
          this.unbindKeys();
        }
      },
      componentDidMount : function() {
        this.bindToGameStateChange();
        this.bindKeys();
      },
      componentWillUnmount : function() {
        this.unbindToGameStateChange();
        this.unbindKeys();
      },
      handleKeyDown : function(event) {
        if (this.state.loading === false) {
          switch(event.keyCode) {
            case 13:
            case 82:
              if (GameSettings.bestGhostEnabled && this.state.personalBest) {
                GameManager.loadRace(GameSettings.track.id, GameSettings.user.u_id);
              }
              GameManager.command("restart");
              break;
            case 78:
              this.gotoRandomTrack();
              break;
            case 70:
              this.toggleFullscreen();
              break;
            case 27:
              this.exitFullscreen();
          }
        }
      },
      exitFullscreen : function() {
        if ("undefined" != typeof GameManager) {
          GameManager.command("exit_fullscreen");
        }
      },
      toggleFullscreen : function() {
        if ("undefined" != typeof GameManager) {
          GameManager.command("fullscreen");
        }
      },
      gotoRandomTrack : function() {
        if (GameSettings.embedded) {
          var facebookString = GameSettings.basePlatformUrl + "/random/track";
          window.open(facebookString);
        } else {
          if ("undefined" != typeof Application) {
            Application.router.do_route("/random/track", {
              trigger : true,
              replace : false
            });
            this.trackEvent("track-complete-random", "track-complete-random", this.props.completeData.analytics.deaths);
          }
        }
      },
      getGameSettings : function() {
        var sup = {};
        return "undefined" != typeof GameSettings && (sup = GameSettings), sup;
      },
      trackEvent : function(name, x, type) {
        var types = {
          category : "track-complete",
          action : name,
          label : x,
          value : type,
          non_interaction : true
        };
        that.track_event(types);
      },
      render : function() {
        var e = this.getGameSettings();
        var game = this.props;
        var state = this.state;
        var actionTitle = e.track.title;
        var loading = (game.options, state.loading);
        var lab = game.completeData;
        var shareTimeInDays = lab.postData.time;
        var rewards = false;
        var recv = "";
        var oldParenthesisCount = false;
        var model = false;
        return state.loading === false && (rewards = state.rewards, recv = state.bestTime, oldParenthesisCount = state.personalBest, model = state.guest), React.createElement("div", {
          className : "dialog-container"
        }, React.createElement("div", {
          className : "complete-dialog"
        }, React.createElement(IndexRoute, {
          title : actionTitle
        }), React.createElement(Note, {
          time : shareTimeInDays,
          bestTime : recv,
          personalBest : oldParenthesisCount
        }), React.createElement(Tab, {
          loading : loading
        }), React.createElement(Map, {
          loading : loading,
          rewards : rewards,
          bestTime : recv,
          guest : model
        }), React.createElement(Window, {
          loading : loading,
          personalBest : oldParenthesisCount
        })), React.createElement(Input, null), React.createElement(Route, null));
      }
    });
    module.exports = storeMixin;
  }, {
    "../components/fullscreenbutton" : 162,
    "../components/homebutton" : 163,
    "../components/leftinfo" : 164,
    "../components/rightinfo" : 165,
    "./footer" : 173,
    "./splash" : 174,
    "./title" : 175,
    react : "react"
  }],
  173 : [function(require, module) {
    var React = require("react");
    var Route = require("../components/footerbutton");
    var that = Application.Helpers.GoogleAnalyticsHelper;
    var storeMixin = React.createClass({
      displayName : "Footer",
      gotoRandom : function() {
        if (GameSettings.embedded) {
          var facebookString = GameSettings.basePlatformUrl + "/random/track";
          window.open(facebookString);
        } else {
          if ("undefined" != typeof Application) {
            Application.router.do_route("/random/track", {
              trigger : true,
              replace : false
            });
            this.trackEvent("track-complete-random", "random-track", 0);
          }
        }
      },
      challengeFriends : function() {
        if (GameSettings.embedded) {
          var facebookString = GameSettings.basePlatformUrl;
          window.open(facebookString);
        } else {
          if ("undefined" != typeof GameManager && "undefined" != typeof Application) {
            Application.events.publish("game.showChallenge");
            this.trackEvent("track-complete-show-challenge", "show-challenge", 0);
          }
        }
      },
      retryTrack : function() {
        if (!this.props.loading) {
          if ("undefined" != typeof GameManager) {
            if (GameSettings.bestGhostEnabled && this.props.personalBest) {
              GameManager.loadRace(GameSettings.track.id, GameSettings.user.u_id);
            }
            GameManager.command("restart");
            this.trackEvent("track-complete-retry", "track-retry", 0);
          }
        }
      },
      gotoInfo : function() {
        if (GameSettings.embedded) {
          var facebookString = GameSettings.basePlatformUrl + "/t/" + GameSettings.track.url;
          window.open(facebookString);
        } else {
          if ("undefined" != typeof GameManager && "undefined" != typeof Application) {
            Application.events.publish("game.showAbout");
            this.trackEvent("track-complete-track-info", "track-info", 0);
          }
        }
      },
      trackEvent : function(name, x, type) {
        var types = {
          category : "track-complete",
          action : name,
          label : x,
          value : type,
          non_interaction : true
        };
        that.track_event(types);
      },
      render : function() {
        var loading = this.props.loading;
        return React.createElement("div", {
          className : "dialog-footer"
        }, React.createElement("div", {
          className : "buttonContainer"
        }, React.createElement(Route, {
          title : "Info",
          icon : "dialog_button_icons dialog_button_icons-info_icon",
          onClick : this.gotoInfo
        }), React.createElement(Route, {
          title : "Challenge",
          icon : "dialog_button_icons dialog_button_icons-challenge_icon",
          color : "green",
          onClick : this.challengeFriends
        }), React.createElement(Route, {
          title : "Retry",
          hotkey : "R",
          icon : "dialog_button_icons dialog_button_icons-retry_icon",
          onClick : this.retryTrack,
          disabled : loading
        }), React.createElement(Route, {
          title : "Random",
          hotkey : "N",
          icon : "dialog_button_icons dialog_button_icons-random_icon",
          onClick : this.gotoRandom
        })));
      }
    });
    module.exports = storeMixin;
  }, {
    "../components/footerbutton" : 161,
    react : "react"
  }],
  174 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "Splash",
      render : function() {
        var indicators = "";
        return indicators = this.props.loading ? React.createElement("span", {
          className : "image track_complete_icons track_complete_icons-track_complete loading"
        }) : React.createElement("span", {
          className : "image track_complete_icons track_complete_icons-track_complete"
        }), React.createElement("div", {
          className : "splash splash-regular"
        }, indicators);
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  175 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "Title",
      render : function() {
        var titleElement = this.props.title;
        return React.createElement("div", {
          className : "dialogTitle dialogTitle-regular"
        }, titleElement);
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  176 : [function(require, module) {
    var React = require("react");
    var Route = require("../components/footerbutton");
    var storeMixin = React.createClass({
      displayName : "SettingsFooter",
      render : function() {
        var that = this.props;
        var malakh = that.resumeCallback;
        var doRecycle = that.retryCallback;
        var toolbarHandler = (that.randomCallback, that.infoCallback);
        return React.createElement("div", {
          className : "dialog-footer"
        }, React.createElement("div", {
          className : "buttonContainer"
        }, React.createElement(Route, {
          title : "Info",
          onClick : toolbarHandler,
          icon : "dialog_button_icons dialog_button_icons-info_icon"
        }), React.createElement(Route, {
          title : "Resume",
          onClick : malakh,
          icon : "dialog_button_icons dialog_button_icons-play_icon",
          color : "green"
        }), React.createElement(Route, {
          title : "Retry",
          onClick : doRecycle,
          hotkey : "R",
          icon : "dialog_button_icons dialog_button_icons-retry_icon"
        }), this.rightButton()));
      },
      rightButton : function() {
        var Redirect = React.createElement(Route, {
          title : "Random",
          onClick : this.props.randomCallback,
          hotkey : "N",
          icon : "dialog_button_icons dialog_button_icons-random_icon"
        });
        return this.props.skipTrackCallback && (Redirect = React.createElement(Route, {
          title : "Skip",
          onClick : this.props.skipTrackCallback,
          hotkey : "N",
          color : "green",
          icon : "dialog_button_icons dialog_button_icons-next_icon"
        })), this.props.nextTrackCallback && (Redirect = React.createElement(Route, {
          title : "Next",
          onClick : this.props.nextTrackCallback,
          hotkey : "N",
          icon : "dialog_button_icons dialog_button_icons-next_icon"
        })), Redirect;
      }
    });
    module.exports = storeMixin;
  }, {
    "../components/footerbutton" : 161,
    react : "react"
  }],
  177 : [function(require, module) {
    var React = require("react");
    var Note = require("../components/toggle");
    var storeMixin = React.createClass({
      displayName : "Form",
      render : function() {
        var nothingFoundWindowValue = GameSettings.bestGhostEnabled;
        var isExportPeriodLimited = GameSettings.soundsEnabled;
        var v = GameSettings.track.vehicle;
        var onInputChange = this.props.changeVehicleCallback;
        var handler = this.props.changeSoundsCallback;
        var onChange = this.props.changeBestGhostCallback;
        return React.createElement("div", {
          className : "form clearfix"
        }, React.createElement("div", {
          className : "soundToggle"
        }, React.createElement("div", {
          className : "title"
        }, "Sounds"), React.createElement(Note, {
          id : "sounds",
          change : handler,
          checked : isExportPeriodLimited
        })), React.createElement("div", {
          className : "bestGhostToggle"
        }, React.createElement("div", {
          className : "title"
        }, "Best Ghost"), React.createElement(Note, {
          id : "bestGhost",
          change : onChange,
          checked : nothingFoundWindowValue
        })), React.createElement("div", {
          className : "vehicle"
        }, React.createElement("div", {
          className : "title"
        }, "Choose Vehicle"), React.createElement("select", {
          className : "primary-select",
          value : v,
          onChange : onInputChange
        }, this.renderVehicle("MTB", "Mountain Bike"), this.renderVehicle("BMX", "BMX Bike"))));
      },
      renderVehicle : function(id, out) {
        var obj = GameSettings.track;
        var catIds = obj.vehicles;
        var result = false;
        return -1 !== catIds.indexOf(id) && (result = React.createElement("option", {
          value : id
        }, out)), result;
      }
    });
    module.exports = storeMixin;
  }, {
    "../components/toggle" : 166,
    react : "react"
  }],
  178 : [function(require, module) {
    var React = require("react");
    var IndexRoute = require("./title");
    var TabTemplate = require("./footer");
    var Window = require("../components/homebutton");
    var Map = require("../components/fullscreenbutton");
    var Note = require("./form");
    var $ = Application.Helpers.AjaxHelper;
    var template = require("../campaign/progress");
    var that = Application.Helpers.GoogleAnalyticsHelper;
    var storeMixin = React.createClass({
      displayName : "SettingsDialog",
      keysBound : false,
      getInitialState : function() {
        return {
          refreshGhost : false
        };
      },
      bindKeys : function() {
        if (this.keysBound === false) {
          this.keysBound = true;
          $(document.body).on("keydown", this.handleKeyDown);
        }
      },
      unbindKeys : function() {
        if (this.keysBound) {
          this.keysBound = false;
          $(document.body).off("keydown", this.handleKeyDown);
        }
      },
      bindToGameStateChange : function() {
        GameManager.on("stateChange", this.onGameStateChange);
      },
      unbindToGameStateChange : function() {
        GameManager.removeListener("stateChange", this.onGameStateChange);
      },
      onGameStateChange : function(self) {
        if (self.inFocus && self.showDialog) {
          this.bindKeys();
        } else {
          this.unbindKeys();
        }
      },
      componentDidMount : function() {
        this.bindToGameStateChange();
        this.bindKeys();
      },
      componentWillUnmount : function() {
        this.unbindToGameStateChange();
        this.unbindKeys();
      },
      handleKeyDown : function(event) {
        switch(event.keyCode) {
          case 13:
          case 82:
            this.retry();
            break;
          case 70:
            this.toggleFullscreen();
            break;
          case 78:
            this.action();
            break;
          case 27:
            this.exitFullscreen();
        }
      },
      exitFullscreen : function() {
        if ("undefined" != typeof GameManager) {
          GameManager.command("exit_fullscreen");
        }
      },
      toggleFullscreen : function() {
        if ("undefined" != typeof GameManager) {
          GameManager.command("fullscreen");
        }
      },
      showTrackInfo : function() {
        if (GameSettings.embedded) {
          var facebookString = GameSettings.basePlatformUrl + "/t/" + GameSettings.track.url;
          window.open(facebookString);
        } else {
          if ("undefined" != typeof GameManager && "undefined" != typeof Application) {
            Application.events.publish("game.showAbout");
            this.trackEvent("game-settings", "game-settings-track-info", "track-info");
          }
        }
      },
      resume : function() {
        if ("undefined" != typeof GameManager) {
          if (this.state.refreshGhost && GameSettings.userTrackStats && GameSettings.userTrackStats.best_time) {
            GameManager.loadRace(GameSettings.track.id, GameSettings.user.u_id, false);
          }
          GameManager.command("dialog", false);
          this.trackEvent("game-settings", "game-settings-resume", "resume-track");
        }
      },
      retry : function() {
        if ("undefined" != typeof GameManager) {
          if (this.state.refreshGhost && GameSettings.userTrackStats && GameSettings.userTrackStats.best_time) {
            GameManager.loadRace(GameSettings.track.id, GameSettings.user.u_id, false);
          }
          GameManager.command("restart");
          this.trackEvent("game-settings", "game-settings-retry", "retry-track");
        }
      },
      action : function() {
        if (GameSettings.isCampaign) {
          var json = GameSettings.campaignData;
          if (json.can_skip) {
            this.skipTrack();
          } else {
            if (json.next_track) {
              this.gotoNextCampaignTrack();
            }
          }
        } else {
          if (GameSettings.embedded) {
            var facebookString = GameSettings.basePlatformUrl + "/random/track";
            window.open(facebookString);
          } else {
            if ("undefined" != typeof Application) {
              Application.router.do_route("/random/track", {
                trigger : true,
                replace : false
              });
              this.trackEvent("game-settings", "game-settings-random", "random-track");
            }
          }
        }
      },
      skipTrack : function() {
        if ("undefined" != typeof Application) {
          var vmId = GameSettings.track.id;
          var noDeliveryToSender = GameSettings.campaignData.skip_cost;
          Application.events.publish("game.skipTrack", vmId, noDeliveryToSender);
          this.trackEvent("game-settings", "game-settings-campaign-skip", "campaign-skip-" + vmId);
        }
      },
      toggleSounds : function(event) {
        var value = event.target.checked;
        if (GameSettings.user.u_id) {
          $.post("account/set_game_sound_setting", {
            sound : value
          }, {
            track : false
          });
        } else {
          this.createCookie("frhd_sound", value);
        }
        if (value) {
          this.trackEvent("game-settings", "game-settings-sound", "sound-on");
        } else {
          this.trackEvent("game-settings", "game-settings-sound", "sound-off");
        }
        GameSettings.soundsEnabled = value;
      },
      toggleBestGhost : function(event) {
        var currentUseHttps = event.target.checked;
        if (GameSettings.user.u_id) {
          $.post("account/set_best_ghost_setting", {
            best_ghost : currentUseHttps
          }, {
            track : false
          });
          GameSettings.bestGhostEnabled = currentUseHttps;
          if (currentUseHttps === false) {
            GameManager.command("clear race");
            this.setState({
              refreshGhost : false
            });
            this.trackEvent("game-settings", "game-settings-best-ghost", "best-ghost-off");
          } else {
            this.setState({
              refreshGhost : true
            });
            this.trackEvent("game-settings", "game-settings-best-ghost", "best-ghost-on");
          }
        }
      },
      changeVehicle : function(cb) {
        var eventName = cb.target.value;
        GameManager.command("change vehicle", eventName);
        this.forceUpdate();
        this.trackEvent("game-settings", "game-settings-change-vehicle", "change-vehicle-" + eventName);
      },
      createCookie : function(name, value, days) {
        if (days) {
          var dateExpires = new Date;
          dateExpires.setTime(dateExpires.getTime() + 24 * days * 60 * 60 * 1e3);
          var expires = "; expires=" + dateExpires.toGMTString();
        } else {
          expires = "";
        }
        document.cookie = name + "=" + value + expires + "; path=/";
      },
      renderProgress : function() {
        var individualMD5 = false;
        if (GameSettings.isCampaign) {
          var inner_height = window.innerHeight;
          if (inner_height > 330) {
            var a = GameSettings.campaignData;
            campaignProgress = a.campaign_progress_bar;
            individualMD5 = React.createElement(template, {
              progress : campaignProgress
            });
          }
        }
        return individualMD5;
      },
      gotoNextCampaignTrack : function() {
        if ("undefined" != typeof Application) {
          var actual = GameSettings.campaignData;
          var eventName = actual.next_track;
          Application.router.do_route("/t/" + eventName + "/c", {
            trigger : true,
            replace : false
          });
          this.trackEvent("game-settings", "game-settings-next-campaign-track", "campaign-track-" + eventName);
        }
      },
      trackEvent : function(name, data, type) {
        var types = {
          category : name,
          action : data,
          label : type,
          value : 0,
          non_interaction : true
        };
        that.track_event(types);
      },
      renderFooter : function() {
        var e = false;
        var t = false;
        if (GameSettings.isCampaign) {
          var json = GameSettings.campaignData;
          if (json.can_skip) {
            e = this.skipTrack;
          } else {
            if (json.next_track) {
              t = this.gotoNextCampaignTrack;
            }
          }
        }
        return React.createElement(TabTemplate, {
          resumeCallback : this.resume,
          infoCallback : this.showTrackInfo,
          retryCallback : this.retry,
          randomCallback : this.action,
          skipTrackCallback : e,
          nextTrackCallback : t
        });
      },
      render : function() {
        return React.createElement("div", {
          className : "dialog-container"
        }, React.createElement("div", {
          className : "settings-dialog"
        }, React.createElement(IndexRoute, {
          title : "Settings"
        }), React.createElement(Note, {
          changeVehicleCallback : this.changeVehicle,
          changeSoundsCallback : this.toggleSounds,
          changeBestGhostCallback : this.toggleBestGhost
        }), this.renderFooter()), this.renderProgress(), React.createElement(Window, null), React.createElement(Map, null));
      }
    });
    module.exports = storeMixin;
  }, {
    "../campaign/progress" : 158,
    "../components/fullscreenbutton" : 162,
    "../components/homebutton" : 163,
    "./footer" : 176,
    "./form" : 177,
    "./title" : 179,
    react : "react"
  }],
  179 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "Title",
      render : function() {
        var titleElement = this.props.title;
        return React.createElement("div", {
          className : "dialogTitle dialogTitle-settings"
        }, titleElement);
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  180 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "FocusOverlay",
      render : function() {
        return React.createElement("div", {
          className : "gameFocusOverlay"
        }, React.createElement("div", {
          className : "text"
        }, " Click to resume "));
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  181 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "Loading",
      render : function() {
        var percent = this.props.percent;
        var label = this.props.text;
        if (0 >= percent) {
          percent = 0;
        }
        var InkBarStyles = {
          width : percent + "%"
        };
        return React.createElement("div", {
          className : "gameLoading"
        }, React.createElement("div", {
          className : "gameLoading-container"
        }, React.createElement("div", {
          className : "gameLoading-bar"
        }, React.createElement("div", {
          className : "gameLoading-progress",
          style : InkBarStyles
        })), React.createElement("div", {
          className : "gameLoading-name"
        }, label)));
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  182 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "Controls",
      showMore : function() {
        if (GameSettings.embedded) {
          var facebookString = GameSettings.basePlatformUrl + "/help";
          window.open(facebookString);
        } else {
          if ("undefined" != typeof Application) {
            Application.events.publish("game.showHelp");
          }
        }
      },
      render : function() {
        var menu = this.props.controls;
        var label = false;
        var css = {};
        switch(menu) {
          case "main":
            label = "Controls:";
            controlKeys = this.renderMainControls();
            css = {
              width : "400px",
              marginLeft : "-200px"
            };
            break;
          case "restart":
            label = "Restart Options:";
            controlKeys = this.renderRestartControls();
            css = {
              width : "330px",
              marginLeft : "-165px"
            };
        }
        return React.createElement("div", {
          className : "in-game-controls",
          style : css
        }, React.createElement("span", {
          className : "link show-more",
          onClick : this.showMore
        }, "Show More"), React.createElement("div", {
          className : "title"
        }, label), controlKeys);
      },
      renderMainControls : function() {
        return React.createElement("table", null, React.createElement("tr", null, React.createElement("td", null, React.createElement("span", {
          className : "keyboard_keys keyboard_keys-accelerate_key_small"
        }), React.createElement("span", {
          className : "name"
        }, "Forward")), React.createElement("td", null, React.createElement("span", {
          className : "keyboard_keys keyboard_keys-left_key_small"
        }), React.createElement("span", {
          className : "name"
        }, "Lean Left")), React.createElement("td", null, React.createElement("span", {
          className : "keyboard_keys keyboard_keys-change_direction_key_small"
        }), React.createElement("span", {
          className : "name"
        }, "Switch Direction"))), React.createElement("tr", null, React.createElement("td", null, React.createElement("span", {
          className : "keyboard_keys keyboard_keys-brake_key_small"
        }), React.createElement("span", {
          className : "name"
        }, "Brake")), React.createElement("td", null, React.createElement("span", {
          className : "keyboard_keys keyboard_keys-right_key_small"
        }), React.createElement("span", {
          className : "name"
        }, "Lean Right")), React.createElement("td", null, React.createElement("span", {
          className : "keyboard_keys keyboard_keys-vehicle_key_small"
        }), React.createElement("span", {
          className : "name"
        }, "Change Vehicle"))));
      },
      renderRestartControls : function() {
        return React.createElement("table", null, React.createElement("tr", null, React.createElement("td", null, React.createElement("span", {
          className : "keyboard_keys keyboard_keys-enter_key_small"
        }), React.createElement("span", {
          className : "name"
        }, "Restart")), React.createElement("td", null, React.createElement("span", {
          className : "keyboard_keys keyboard_keys-restart_key_small"
        }), React.createElement("span", {
          className : "name"
        }, "Retry"))), React.createElement("tr", null, React.createElement("td", null, React.createElement("span", {
          className : "keyboard_keys keyboard_keys-cancel_checkpoint_key_small"
        }), React.createElement("span", {
          className : "name"
        }, "Cancel Checkpoint"))));
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  183 : [function(require, module) {
    var React = require("react");
    var storeMixin = React.createClass({
      displayName : "Rotate",
      render : function() {
        return React.createElement("div", {
          className : "mobileRotate"
        }, React.createElement("span", {
          className : "mobile_rotate mobile_rotate-rotate_portrait"
        }), React.createElement("span", {
          className : "text"
        }, "Rotate your screen to view track info"));
      }
    });
    module.exports = storeMixin;
  }, {
    react : "react"
  }],
  184 : [function(require, module) {
    var React = require("react");
    var that = (Application.Helpers.AjaxHelper, Application.Helpers.GoogleAnalyticsHelper);
    var template = require("../dialogs/components/footerbutton");
    var storeMixin = React.createClass({
      displayName : "retryComponent",
      keysBound : false,
      getInitialState : function() {
        return {
          refreshGhost : false
        };
      },
      bindKeys : function() {
        if (this.keysBound === false) {
          this.keysBound = true;
          $(document.body).on("keydown", this.handleKeyDown);
        }
      },
      unbindKeys : function() {
        if (this.keysBound) {
          this.keysBound = false;
          $(document.body).off("keydown", this.handleKeyDown);
        }
      },
      bindToGameStateChange : function() {
        GameManager.on("stateChange", this.onGameStateChange);
      },
      unbindToGameStateChange : function() {
        GameManager.removeListener("stateChange", this.onGameStateChange);
      },
      onGameStateChange : function(self) {
        if (self.inFocus && self.showDialog) {
          this.bindKeys();
        } else {
          this.unbindKeys();
        }
      },
      componentDidMount : function() {
        this.bindToGameStateChange();
        this.bindKeys();
      },
      componentWillUnmount : function() {
        this.unbindToGameStateChange();
        this.unbindKeys();
      },
      handleKeyDown : function(event) {
        switch(event.keyCode) {
          case 13:
          case 82:
            this.retry();
            break;
          case 78:
            this.randomTrack();
        }
      },
      resume : function() {
        if ("undefined" != typeof GameManager) {
          if (this.state.refreshGhost && GameSettings.userTrackStats && GameSettings.userTrackStats.best_time) {
            GameManager.loadRace(GameSettings.track.id, GameSettings.user.u_id, false);
          }
          GameManager.command("resume");
          this.trackEvent("game-retry", "game-retry-resume", "resume-track");
        }
      },
      retry : function() {
        if ("undefined" != typeof GameManager) {
          if (this.state.refreshGhost && GameSettings.userTrackStats && GameSettings.userTrackStats.best_time) {
            GameManager.loadRace(GameSettings.track.id, GameSettings.user.u_id, false);
          }
          GameManager.command("restart");
          this.trackEvent("game-retry", "game-retry-retry", "retry-track");
        }
      },
      randomTrack : function() {
        if (GameSettings.isCampaign) {
          var json = GameSettings.campaignData;
          if (json.can_skip) {
            this.skipTrack();
          } else {
            if (json.next_track) {
              this.gotoNextCampaignTrack();
            }
          }
        } else {
          if (GameSettings.embedded) {
            var facebookString = GameSettings.basePlatformUrl + "/random/track";
            window.open(facebookString);
          } else {
            if ("undefined" != typeof Application) {
              Application.router.do_route("/random/track", {
                trigger : true,
                replace : false
              });
              this.trackEvent("game-retry", "game-retry-random", "random-track");
            }
          }
        }
      },
      homePage : function() {
        if (GameSettings.embedded) {
          var url = GameSettings.basePlatformUrl + "/home";
          window.open(url);
        } else {
          if ("undefined" != typeof Application) {
            Application.router.do_route("/home", {
              trigger : true,
              replace : false
            });
            this.trackEvent("game-home", "game-retry-home", "go-home");
          }
        }
      },
      skipTrack : function() {
        if ("undefined" != typeof Application) {
          var vmId = GameSettings.track.id;
          var noDeliveryToSender = GameSettings.campaignData.skip_cost;
          Application.events.publish("game.skipTrack", vmId, noDeliveryToSender, true);
          this.trackEvent("game-retry", "game-retry-campaign-skip", "campaign-skip-" + vmId);
        }
      },
      gotoNextCampaignTrack : function() {
        if ("undefined" != typeof Application) {
          var actual = GameSettings.campaignData;
          var eventName = actual.next_track;
          Application.router.do_route("/t/" + eventName + "/c", {
            trigger : true,
            replace : false
          });
          this.trackEvent("game-retry", "game-retry-next-campaign-track", "campaign-track-" + eventName);
        }
      },
      trackEvent : function(name, data, type) {
        var types = {
          category : name,
          action : data,
          label : type,
          value : 0,
          non_interaction : true
        };
        that.track_event(types);
      },
      render : function() {
        var element = this.props.playerAlive;
        var valueClassName = "retry-options";
        return this.props.paused && (valueClassName = valueClassName + " paused"), React.createElement("div", {
          className : valueClassName
        }, React.createElement("div", {
          className : "dialog-footer"
        }, React.createElement("div", {
          className : "buttonContainer"
        }, this.leftButton(element), React.createElement(template, {
          title : "Retry",
          onClick : this.retry,
          hotkey : "R",
          icon : "dialog_button_icons dialog_button_icons-retry_icon"
        }), this.rightButton())));
      },
      rightButton : function() {
        var renderingTemplate = React.createElement(template, {
          title : "Random",
          onClick : this.randomTrack,
          hotkey : "N",
          icon : "dialog_button_icons dialog_button_icons-random_icon"
        });
        if (GameSettings.isCampaign) {
          var json = GameSettings.campaignData;
          if (json.can_skip) {
            renderingTemplate = React.createElement(template, {
              title : "Skip",
              onClick : this.skipTrack,
              hotkey : "N",
              color : "green",
              icon : "dialog_button_icons dialog_button_icons-next_icon"
            });
          } else {
            if (json.next_track) {
              renderingTemplate = React.createElement(template, {
                title : "Next",
                onClick : this.gotoNextCampaignTrack,
                hotkey : "N",
                icon : "dialog_button_icons dialog_button_icons-next_icon"
              });
              nextTrackCallback = this.gotoNextCampaignTrack;
            }
          }
        }
        return renderingTemplate;
      },
      leftButton : function(node) {
        var t = React.createElement(template, {
          title : "Home",
          onClick : this.homePage,
          icon : "dialog_button_icons dialog_button_icons-home_btn_blue_outline"
        });
        return node && (t = React.createElement(template, {
          title : "Resume",
          onClick : this.resume,
          icon : "dialog_button_icons dialog_button_icons-play_icon",
          color : "green"
        })), t;
      }
    });
    module.exports = storeMixin;
  }, {
    "../dialogs/components/footerbutton" : 161,
    react : "react"
  }],
  react : [function(factory, module) {
    module.exports = factory("./lib/React");
  }, {
    "./lib/React" : 28
  }]
}, {}, [155, "react"]);
